// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/harmannkibue/golang_gin_clean_architecture/internal/usecase/repositories (interfaces: Store)

// Package mockDb is a generated GoMock package.
package mockDb

import (
	context "context"
	sql "database/sql"
	"github.com/harmannkibue/golang_gin_clean_architecture/internal/usecase/repositories/sqlc"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CreateBlog mocks base method.
func (m *MockStore) CreateBlog(arg0 context.Context, arg1 sql.NullString) (sqlc.Blog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBlog", arg0, arg1)
	ret0, _ := ret[0].(sqlc.Blog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBlog indicates an expected call of CreateBlog.
func (mr *MockStoreMockRecorder) CreateBlog(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBlog", reflect.TypeOf((*MockStore)(nil).CreateBlog), arg0, arg1)
}

// DeleteBlog mocks base method.
func (m *MockStore) DeleteBlog(arg0 context.Context, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBlog", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBlog indicates an expected call of DeleteBlog.
func (mr *MockStoreMockRecorder) DeleteBlog(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBlog", reflect.TypeOf((*MockStore)(nil).DeleteBlog), arg0, arg1)
}

// GetBlog mocks base method.
func (m *MockStore) GetBlog(arg0 context.Context, arg1 uuid.UUID) (sqlc.Blog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlog", arg0, arg1)
	ret0, _ := ret[0].(sqlc.Blog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlog indicates an expected call of GetBlog.
func (mr *MockStoreMockRecorder) GetBlog(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlog", reflect.TypeOf((*MockStore)(nil).GetBlog), arg0, arg1)
}

// ListBlog mocks base method.
func (m *MockStore) ListBlog(arg0 context.Context, arg1 sqlc.ListBlogParams) ([]sqlc.Blog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBlog", arg0, arg1)
	ret0, _ := ret[0].([]sqlc.Blog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBlog indicates an expected call of ListBlog.
func (mr *MockStoreMockRecorder) ListBlog(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBlog", reflect.TypeOf((*MockStore)(nil).ListBlog), arg0, arg1)
}
